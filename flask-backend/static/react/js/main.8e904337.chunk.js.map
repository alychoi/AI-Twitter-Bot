{"version":3,"sources":["TweetBox.js","firebase.js","Comments.js","Post.js","Feed.js","Widgets.js","SidebarOption.js","App.js","serviceWorker.js","index.js"],"names":["TweetBox","useState","tweetMessage","setTweetMessage","tweetImage","setTweetImage","className","Avatar","src","onChange","e","target","value","placeholder","type","Button","onClick","a","fetch","method","headers","body","JSON","stringify","displayName","username","verified","text","image","avatar","ok","console","log","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","PostComment","forwardRef","ref","Comments","tweetComment","setTweetComment","comments","setComments","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","preventDefault","add","comment","id","key","Post","visible","setVisible","alt","style","alignItems","fontSize","Feed","posts","setPosts","then","response","json","fontWeight","paddingBottom","color","name","post","Widgets","SidebarOption","active","Icon","App","to","HomeIcon","SearchIcon","NotificationsNoneIcon","MailOutlineIcon","BookmarkBorderIcon","ListAltIcon","PermIdentityIcon","MoreHorizIcon","variant","fullWidth","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.8e904337.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./TweetBox.css\";\nimport { Avatar, Button } from \"@material-ui/core\";\n\nfunction TweetBox() {\n  const [tweetMessage, setTweetMessage] = useState(\"\");\n  const [tweetImage, setTweetImage] = useState(\"\");\n\n  /*const sendTweet = async () => {\n    //e.preventDefault();\n\n    const response = await fetch('/api', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        displayName: \"Bob Choi\",\n        username: \"alychoi123\",\n        verified: true,\n        text: tweetMessage,\n        image: tweetImage,\n        avatar:\n         \"https://i.pinimg.com/736x/fd/a1/3b/fda13b9d6d88f25a9d968901d319216a.jpg\"\n      })\n    });\n\n      if (response.ok) {\n        console.log(\"It worked!\");\n      }\n    }*/\n    /*.then(response => response.json()).then(json => {\n      const accessToken = json.access_token;\n      setTweetMessage(accessToken);\n      setTweetImage(accessToken);\n      //setTweetMessage(json);\n      //setTweetImage(json);\n      console.log(json);\n    });*/\n\n    /*db.collection(\"posts\").add({\n      displayName: \"Bob Choi\",\n      username: \"alychoi123\",\n      verified: true,\n      text: tweetMessage,\n      image: tweetImage,\n      avatar:\n        \"https://i.pinimg.com/736x/fd/a1/3b/fda13b9d6d88f25a9d968901d319216a.jpg\",\n    });\n\n    setTweetMessage(\"\");\n    setTweetImage(\"\");\n\n    console.log(setTweetMessage);\n  };*/\n\n  return (\n    <div className=\"tweetBox\">\n      <form>\n        <div className=\"tweetBox__input\">\n          <Avatar src=\"https://i.pinimg.com/736x/fd/a1/3b/fda13b9d6d88f25a9d968901d319216a.jpg\" />\n          <input\n            onChange={(e) => setTweetMessage(e.target.value)}\n            value={tweetMessage}\n            placeholder=\"What's happening?\"\n            type=\"text\"\n          />\n        </div>\n        <input\n          value={tweetImage}\n          onChange={(e) => setTweetImage(e.target.value)}\n          className=\"tweetBox__imageInput\"\n          placeholder=\"Optional: Enter image URL\"\n          type=\"text\"\n        />\n\n        <Button\n          onClick={async () => {\n            const response = await fetch('/api', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                displayName: \"Bob Choi\",\n                username: \"alychoi123\",\n                verified: true,\n                text: tweetMessage,\n                image: tweetImage,\n                avatar:\n                \"https://i.pinimg.com/736x/fd/a1/3b/fda13b9d6d88f25a9d968901d319216a.jpg\"\n              })\n            });\n\n            if (response.ok) {\n              console.log(\"It worked!\");\n              setTweetMessage(\"\");\n              setTweetImage(\"\");\n            }\n          }}\n          type=\"submit\"\n          className=\"tweetBox__tweetButton\"\n        >\n          Tweet\n        </Button>\n      </form>\n    </div>\n  );\n}\n\nexport default TweetBox;\n","import firebase from \"firebase\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyAY34HYZZOjK6cELn5bsFmhuVg4JIQU99w\",\n  authDomain: \"twitter-clone-80959.firebaseapp.com\",\n  databaseURL: \"https://twitter-clone-80959-default-rtdb.firebaseio.com\",\n  projectId: \"twitter-clone-80959\",\n  storageBucket: \"twitter-clone-80959.appspot.com\",\n  messagingSenderId: \"46692477147\",\n  appId: \"1:46692477147:web:589ea7712d2d7be9e204fe\",\n  measurementId: \"G-DRGVVTGB9G\"\n};\n\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React, { forwardRef, useState, useEffect } from \"react\";\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\nimport Post from \"./Feed\";\nimport \"./Comments.css\";\nimport { Avatar, Button } from \"@material-ui/core\";\nimport db from \"./firebase\";\nimport FlipMove from \"react-flip-move\";\n\nconst PostComment = forwardRef(\n    ({ displayName, username, verified, text, avatar }, ref) => {\n      return (\n        <div className=\"post\" ref={ref}>\n          <div className=\"post__avatar\">\n            <Avatar src={avatar} />\n          </div>\n          <div className=\"post__body\">\n            <div className=\"post__header\">\n              <div className=\"post__headerText\">\n                <h3>\n                  {displayName}{\" \"}\n                  <span className=\"post__headerSpecial\">\n                    {verified && <VerifiedUserIcon className=\"post__badge\" />} @\n                    {username}\n                  </span>\n                </h3>\n              </div>\n              <div className=\"post__headerDescription\">\n                <p>{text}</p>\n              </div>\n            </div> \n        </div>\n        </div>\n        );\n    }\n  ); \n\n\nfunction Comments() {\n    const [tweetComment, setTweetComment] = useState(\"\");\n    const [comments, setComments] = useState([]);\n\n    useEffect(() => {\n      db.collection(\"comments\").onSnapshot((snapshot) =>\n        setComments(snapshot.docs.map((doc) => doc.data()))\n      );\n    }, []);\n\n  const sendComment = (e) => {\n    e.preventDefault();\n\n    db.collection(\"comments\").add({\n      displayName: \"Bob\",\n      username: \"bob\",\n      verified: false,\n      text: tweetComment,\n      avatar:\n        \"https://yt3.ggpht.com/ytc/AAUvwnhkZjfj3AhZNOvbxzIzVLTKZZHGLAlIHVstuYx1=s900-c-k-c0x00ffffff-no-rj\",\n    });\n\n    setTweetComment(\"\");\n  };\n  const idMatches = true;\n\n  return (\n    <div className=\"tweetBox\">\n        <form>\n            <div className=\"tweetBox__input\">\n            <Avatar src=\"https://yt3.ggpht.com/ytc/AAUvwnhkZjfj3AhZNOvbxzIzVLTKZZHGLAlIHVstuYx1=s900-c-k-c0x00ffffff-no-rj\" />\n            <input\n                onChange={(e) => setTweetComment(e.target.value)}\n                value={tweetComment}\n                placeholder=\"Reply...\"\n                type=\"text\"\n            />\n            </div>\n            <Button\n            onClick={sendComment}\n            type=\"submit\"\n            className=\"tweetBox__tweetButton\"\n            >\n            Reply\n            </Button>\n            { idMatches &&\n            <FlipMove>\n        {comments.map((comment) => (\n          <PostComment\n            id={comment.id}\n            key={comment.text}\n            displayName={comment.displayName}\n            username={comment.username}\n            verified={comment.verified}\n            text={comment.text}\n            avatar={comment.avatar}\n          />\n        ))}\n      </FlipMove>}\n        </form>\n    </div>\n  );\n}\n\nexport default Comments;\n","import React, { forwardRef, useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport \"./Post.css\";\nimport { Avatar } from \"@material-ui/core\";\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\nimport PublishIcon from \"@material-ui/icons/Publish\";\nimport Comments from \"./Comments\";\n\n\nconst Post = forwardRef(\n  ({ id, displayName, username, verified, text, image, avatar }, ref) => {\n    const [visible, setVisible] = useState(false);\n\n    function hideMe() {\n      setVisible(false);\n    }\n\n    function showMe() {\n      setVisible(true);\n    }\n\n    console.log(text);\n\n    let style = {\n      position: \"fixed\",\n      zIndex: \"1\",\n      paddingTop: \"300px\",\n      width: \"50%\",\n      height: \"100%\",\n      overflow: \"auto\",\n    }\n\n    if (!visible) style.display = \"none\";\n\n    return (\n      <div className=\"post\" ref={ref}>\n        <div className=\"post__avatar\">\n          <Avatar src={avatar} />\n        </div>\n        <div className=\"post__body\">\n          <div className=\"post__header\">\n            <div className=\"post__headerText\">\n              <h3>\n                {displayName}{\" \"}\n                <span className=\"post__headerSpecial\">\n                  {verified && <VerifiedUserIcon className=\"post__badge\" />} @\n                  {username}\n                </span>\n              </h3>\n            </div>\n            <div className=\"post__headerDescription\">\n              <p>{text}</p>\n            </div>\n          </div>\n          <img src={image} alt=\"\" />\n          <div className=\"post__footer\">\n            <Button\n              onClick={showMe}\n              type=\"submit\"\n              style={{alignItems: \"normal\"}}\n            >\n              <ChatBubbleOutlineIcon fontSize=\"small\" />\n            </Button>\n            <br></br>\n            {visible && <div>\n            <Button\n              onClick={hideMe}\n              type=\"submit\"\n              >\n              &times;\n            </Button>\n            <Comments />\n            </div>}\n            <RepeatIcon fontSize=\"small\" />\n            <FavoriteBorderIcon fontSize=\"small\" />\n            <PublishIcon fontSize=\"small\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n);\n\nexport default Post;\n","import React, { useState, useEffect } from \"react\";\nimport TweetBox from \"./TweetBox\";\nimport Post from \"./Post\";\nimport \"./Feed.css\";\nimport db from \"./firebase\";\nimport FlipMove from \"react-flip-move\";\n\nfunction Feed() {\n  const [posts, setPosts] = useState([]);\n\n  //let db = new sqlite3.Database('../flask-backend/')\n  useEffect(() => {\n    fetch('/api').then(response => response.json().then(data => {\n      setPosts(data);\n      console.log(data);\n    })\n   );\n  }, []);\n  /*useEffect(() => {\n    db.collection(\"posts\").onSnapshot((snapshot) =>\n      setPosts(snapshot.docs.map((doc) => doc.data()))\n    );\n  }, []);\n\n  console.log(setPosts);*/\n\n  return (\n    <div className=\"feed\">\n      <div className=\"feed__header\">\n        <h2>Home</h2>\n      </div>\n\n      <TweetBox />\n\n      <div className=\"generate__header\">\n      <form method=\"post\">\n        <center><h2 style={{fontSize:\"20px\",fontWeight:\"800\",paddingBottom:\"15px\"}}>Let's Go!</h2>\n        <p style={{color:\"gray\"}}>Click on the button below to create AI-generated text.</p>\n        <input type=\"submit\"\n          //onClick={sendTweet}\n          type=\"submit\"\n          className=\"tweetBox__tweetButton\"\n          value=\"Generate\"\n        /></center>\n        <input type=\"predict\" name=\"predict\"/>\n        </form>\n      </div>\n\n      <FlipMove>\n        {posts.map((post) => (\n          <Post\n            id={post.id}\n            key={post.text}\n            displayName={post.displayName}\n            username={post.username}\n            verified={post.verified}\n            text={post.text}\n            avatar={post.avatar}\n            image={post.image}\n          />\n        ))}\n      </FlipMove>\n    </div>\n  );\n}\n\nexport default Feed;\n","import React from \"react\";\nimport \"./Widgets.css\";\nimport {\n  TwitterTimelineEmbed,\n  TwitterShareButton,\n  TwitterTweetEmbed,\n} from \"react-twitter-embed\";\nimport SearchIcon from \"@material-ui/icons/Search\";\n\nfunction Widgets() {\n  return (\n    <div className=\"widgets\">\n      <div className=\"widgets__input\">\n        <SearchIcon className=\"widgets__searchIcon\" />\n        <input placeholder=\"Search Twitter\" type=\"text\" />\n      </div>\n\n      <div className=\"widgets__widgetContainer\">\n        <h2>What's happening</h2>\n\n      </div>\n    </div>\n  );\n}\n\nexport default Widgets;\n","import React from \"react\";\nimport \"./SidebarOption.css\";\n\nfunction SidebarOption({ active, text, Icon }) {\n  return (\n    <div className={`sidebarOption ${active && \"sidebarOption--active\"}`}>\n      <Icon />\n      <h2>{text}</h2>\n    </div>\n  );\n}\n\nexport default SidebarOption;\n","import React, { useState, useEffect } from 'react';\nimport Feed from \"./Feed\";\nimport Widgets from \"./Widgets\";\nimport \"./App.css\";\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\nimport \"./Sidebar.css\";\nimport TwitterIcon from \"@material-ui/icons/Twitter\";\nimport SidebarOption from \"./SidebarOption\";\nimport HomeIcon from \"@material-ui/icons/Home\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport NotificationsNoneIcon from \"@material-ui/icons/NotificationsNone\";\nimport MailOutlineIcon from \"@material-ui/icons/MailOutline\";\nimport BookmarkBorderIcon from \"@material-ui/icons/BookmarkBorder\";\nimport ListAltIcon from \"@material-ui/icons/ListAlt\";\nimport PermIdentityIcon from \"@material-ui/icons/PermIdentity\";\nimport MoreHorizIcon from \"@material-ui/icons/MoreHoriz\";\nimport { Button } from \"@material-ui/core\";\n\nfunction App() {\n\n  return (\n    // BEM\n    <div className=\"app\">\n    <BrowserRouter>\n    <div className=\"sidebar\">\n      <Link to=\"/home\"><TwitterIcon className=\"sidebar__twitterIcon\" /></Link>\n      <Link to=\"/home\"><SidebarOption active Icon={HomeIcon} text=\"Home\" /></Link>\n      <Link to=\"/explore\"><SidebarOption Icon={SearchIcon} text=\"Explore\" /></Link>\n      <Link to=\"/notifications\"><SidebarOption Icon={NotificationsNoneIcon} text=\"Notifications\" /></Link>\n      <Link to=\"/messages\"><SidebarOption Icon={MailOutlineIcon} text=\"Messages\" /></Link>\n      <Link to=\"/bookmarks\"><SidebarOption Icon={BookmarkBorderIcon} text=\"Bookmarks\" /></Link>\n      <Link to=\"/lists\"><SidebarOption Icon={ListAltIcon} text=\"Lists\" /></Link>\n      <Link to=\"/profile\"><SidebarOption Icon={PermIdentityIcon} text=\"Profile\" /></Link>\n      <Link to=\"/more\"><SidebarOption Icon={MoreHorizIcon} text=\"More\" /></Link>\n      \n\n      {/* Button -> Tweet */}\n      <Button variant=\"outlined\" className=\"sidebar__tweet\" fullWidth>\n        Tweet \n      </Button>\n    </div>\n        <Switch>\n            <Route path=\"/home\">\n              <Feed />\n              <Widgets />\n            </Route>\n        </Switch>\n        </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}